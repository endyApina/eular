//PROBLEM_STATEMENT
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

package main

import (
	"log"
)

func main() {
	log.Println("Starting fibonacci sequence")
	//start fibonacci sequence
	nNumber := 1
	fibonnecciArray := []int{1}
	sum := 0

	for {
		if nNumber == 1 {
			nNumber = nNumber + nNumber
		} else {
			nNumber = nNumber + fibonnecciArray[len(fibonnecciArray)-2]
		}
		fibonnecciArray = append(fibonnecciArray, nNumber)
		if nNumber > 4000000 {
			sum = findSumOfEvenNumberFromArray(fibonnecciArray)
			break
		}
	}

	log.Println(fibonnecciArray)
	log.Println(sum)
}

func findSumOfEvenNumberFromArray(arrayObject []int) int {
	sum := int(0)
	for _, val := range arrayObject {
		if val%2 == 0 {
			sum += val
		}
	}
	return sum
}
